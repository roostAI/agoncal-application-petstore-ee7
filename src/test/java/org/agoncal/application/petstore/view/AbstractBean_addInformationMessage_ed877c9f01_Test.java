// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. **Test Scenario**: Check if the addInformationMessage adds the message into FacesContext when valid message is given.
   
   **Test Steps**: 
   - Create a message and add it using the addInformationMessage function. 
   - Retrieve the messages from the FacesContext.
   - Check if the message has been added to the FacesContext.

2. **Test Scenario**: Check if the addInformationMessage correctly formats the message when arguments are passed.

   **Test Steps**: 
   - Create a message with placeholders and associated arguments.
   - Add the created message using the addInformationMessage function.
   - Retrieve the message from the FacesContext.
   - Check if the message is correctly formatted with the provided arguments.

3. **Test Scenario**: Validate the function when the message value is null.

   **Test Steps**: 
   - Pass a null message to the addInformationMessage function.
   - Check if the function handles the null value correctly (i.e., No NullPointException is thrown).

4. **Test Scenario**: Validate the proper severity level of the message added.

   **Test Steps**: 
   - Add any message using the addInformationMessage function.
   - Retrieve the added message from the FacesContext.
   - Check if the severity level of the message is info (or as expected).

5. **Test Scenario**: Check if addInformationMessage correctly formats the message when no arguments are passed.
   
   **Test Steps**: 
   - Pass a message without any arguments to the addInformationMessage function.
   - Retrieve the messages from the FacesContext.
   - Check if the message is added as expected without any argument substitution.

6. **Test Scenario**: Validate the function when an empty string is given as a message.

   **Test Steps**: 
   - Pass an empty string to the addInformationMessage function.
   - Check if the function handles the empty string correctly (i.e., How the system behaves when an empty string is added).

Please note: These scenarios assume the existence of a function to retrieve messages from the FacesContext.
*/
import org.junit.*;
import static org.junit.Assert.*;
import javax.faces.application.FacesMessage;
import org.mockito.Mock;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import javax.faces.context.FacesContext;
import java.util.Iterator;
import org.agoncal.application.petstore.view.AbstractBean;
import static org.mockito.Mockito.when;

public class AbstractBean_addInformationMessage_ed877c9f01_Test {
    @Mock
    private FacesContext context;
    @Mock
    private Iterator<FacesMessage> messageIter;
    @InjectMocks
    private AbstractBean abstractBean;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAddInformationMessage_validMessageGiven() {
        abstractBean.addInformationMessage("Valid message");
        when(context.getMessages()).thenReturn(messageIter);
        when(messageIter.hasNext()).thenReturn(true);
        when(messageIter.next()).thenReturn(new FacesMessage());
        assertTrue(context.getMessages().hasNext());
    }

    @Test
    public void testAddInformationMessage_messageWithArgsGiven() {
        abstractBean.addInformationMessage("Hello {0}", "world");
        when(context.getMessages()).thenReturn(messageIter);
        when(messageIter.hasNext()).thenReturn(true);
        when(messageIter.next()).thenReturn(new FacesMessage("Hello world"));
        assertSame("Hello world", context.getMessages().next().getSummary());
    }

    @Test(expected = NullPointerException.class)
    public void testAddInformationMessage_nullMessageGiven() {
        abstractBean.addInformationMessage(null);
    }

    @Test
    public void testAddInformationMessage_checkSeverityLevel() {
        abstractBean.addInformationMessage("Valid message");
        when(context.getMessages()).thenReturn(messageIter);
        when(messageIter.hasNext()).thenReturn(true);
        when(messageIter.next()).thenReturn(new FacesMessage(FacesMessage.SEVERITY_INFO, "Valid message", null));
        assertSame("INFO", context.getMessages().next().getSeverity().toString());
    }

    @Test
    public void testAddInformationMessage_noArgumentsGiven() {
        abstractBean.addInformationMessage("Hello world");
        when(context.getMessages()).thenReturn(messageIter);
        when(messageIter.hasNext()).thenReturn(true);
        when(messageIter.next()).thenReturn(new FacesMessage("Hello world"));
        assertSame("Hello world", context.getMessages().next().getSummary());
    }

    @Test
    public void testAddInformationMessage_emptyStringGiven() {
        abstractBean.addInformationMessage("");
        when(context.getMessages()).thenReturn(messageIter);
        when(messageIter.hasNext()).thenReturn(false);
        assertFalse(context.getMessages().hasNext());
    }
}
