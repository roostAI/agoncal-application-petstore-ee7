/*
Test generated by RoostGPT for test agoncal-application-petstore-ee7 using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Null Name
- Test whether the function returns null when the name is null.

Test Scenario 2: Empty Name
- Test whether the function returns an empty string when the name is an empty string.

Test Scenario 3: Single Character Name
- Test whether the function returns correctly when the name consists of a single character.

Test Scenario 4: Name with Special Characters
- Test whether the function returns correctly when the name consists of special characters.

Test Scenario 5: Name with Spaces
- Test whether the function returns correctly when the name consists of spaces (either at the beginning, middle or end).

Test Scenario 6: Name with Numbers
- Test whether the function returns correctly when the name consists of numbers.

Test Scenario 7: Long Name
- Test whether the function returns correctly when the name is very long (over the typical expected size).

Test Scenario 8: Unicode Characters in Name
- Test whether the function returns correctly when the name consists of Unicode characters.

Test Scenario 9: Case Sensitivity
- Test whether the function is case sensitive. For example, it should treat "Name" and "name" as different inputs.

Test Scenario 10: Name Consisting Only of Whitespaces
- Test whether the function returns correctly when the name consists only of whitespaces.
*/
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class Category_toString_ceffa8036e_Test {

    @Test
    public void testToString_NullName() {
        Category category = new Category();
        category.setName(null);
        assertNull(category.toString());
    }

    @Test
    public void testToString_EmptyName() {
        Category category = new Category();
        category.setName("");
        assertEquals("", category.toString());
    }

    @Test
    public void testToString_SingleCharacterName() {
        Category category = new Category();
        category.setName("A");
        assertEquals("A", category.toString());
    }

    @Test
    public void testToString_NameWithSpecialCharacters() {
        Category category = new Category();
        category.setName("@#$");
        assertEquals("@#$", category.toString());
    }

    @Test
    public void testToString_NameWithSpaces() {
        Category category = new Category();
        category.setName(" A B ");
        assertEquals(" A B ", category.toString());
    }

    @Test
    public void testToString_NameWithNumbers() {
        Category category = new Category();
        category.setName("123");
        assertEquals("123", category.toString());
    }

    @Test
    public void testToString_LongName() {
        Category category = new Category();
        String longName = new String(new char[1000]).replace("\0", "A");
        category.setName(longName);
        assertEquals(longName, category.toString());
    }

    @Test
    public void testToString_UnicodeCharactersInName() {
        Category category = new Category();
        category.setName("名前");
        assertEquals("名前", category.toString());
    }

    @Test
    public void testToString_CaseSensitivity() {
        Category category1 = new Category();
        category1.setName("Name");
        Category category2 = new Category();
        category2.setName("name");
        assertEquals("Name", category1.toString());
        assertEquals("name", category2.toString());
    }

    @Test
    public void testToString_NameConsistingOnlyOfWhitespaces() {
        Category category = new Category();
        category.setName("   ");
        assertEquals("   ", category.toString());
    }

}
