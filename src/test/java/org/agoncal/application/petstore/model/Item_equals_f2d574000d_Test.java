// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. Scenario: Checking equal objects
   Given two objects with the same `name` and `description` attributes
   When `equals` method is invoked
   Then the method should return `true` 

2. Scenario: Comparing the object with itself
   Given an object
   When `equals` method is invoked with it as the argument
   Then the method should return `true`
   
3. Scenario: Passing `null` as argument
   Given an object
   When `equals` method is invoked with `null`
   Then the method should return `false`

4. Scenario: Comparing objects with different classes
   Given an object and an object of different class
   When `equals` method is invoked
   Then the method should return `false`
   
5. Scenario: Comparing objects with different `name` attributes
   Given two objects with the same `description` attribute but different `name` attributes
   When `equals` method is invoked
   Then the method should return `false`
   
6. Scenario: Comparing objects with a different `description` attribute
   Given two objects with the same `name` attribute but different `description` attributes
   When `equals` method is invoked
   Then the method should return `false`

7. Scenario: Comparing objects with both `name` and `description` attributes different
   Given two objects with different `name` and `description` attributes
   When `equals` method is invoked
   Then the method should return `false`

8. Scenario: Comparing objects with `name` attribute being null in one of them
   Given two objects with the same `description` attribute but `name` attribute is null in one of them
   When `equals` method is invoked
   Then the method should return `false`

9. Scenario: Comparing objects with `description` attribute being null in one of them
   Given two objects with the same `name` attribute but `description` attribute is null in one of them
   When `equals` method is invoked
   Then the method should return `false`
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class Item_equals_f2d574000d_Test {

    @Test
    void equals_sameAttributes_true() {
        Item firstItem = new Item("test1", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));
        Item secondItem = new Item("test1", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));

        Assertions.assertTrue(firstItem.equals(secondItem));
    }

    @Test
    void equals_sameObject_true() {
        Item item = new Item("test1", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));

        Assertions.assertTrue(item.equals(item));
    }

    @Test
    void equals_nullObject_false() {
        Item item = new Item("test1", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));

        Assertions.assertFalse(item.equals(null));
    }

    @Test
    void equals_differentClasses_false() {
        Item item = new Item("test1", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));

        Assertions.assertFalse(item.equals(new Object()));
    }

    @Test
    void equals_differentNames_false() {
        Item firstItem = new Item("test1", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));
        Item secondItem = new Item("test2", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));

        Assertions.assertFalse(firstItem.equals(secondItem));
    }

    @Test
    void equals_differentDescriptions_false() {
        Item firstItem = new Item("test1", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));
        Item secondItem = new Item("test1", 1f, "path1", "desc2", new Product("p1", "desc1", new Category()));

        Assertions.assertFalse(firstItem.equals(secondItem));
    }

    @Test
    void equals_differentNamesAndDescriptions_false() {
        Item firstItem = new Item("test1", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));
        Item secondItem = new Item("test2", 1f, "path1", "desc2", new Product("p1", "desc1", new Category()));

        Assertions.assertFalse(firstItem.equals(secondItem));
    }

    @Test
    void equals_nullName_false() {
        Item firstItem = new Item(null, 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));
        Item secondItem = new Item("test2", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));

        Assertions.assertFalse(firstItem.equals(secondItem));
    }

    @Test
    void equals_nullDescription_false() {
        Item firstItem = new Item("test1", 1f, "path1", null, new Product("p1", "desc1", new Category()));
        Item secondItem = new Item("test2", 1f, "path1", "desc1", new Product("p1", "desc1", new Category()));

        Assertions.assertFalse(firstItem.equals(secondItem));
    }
}
