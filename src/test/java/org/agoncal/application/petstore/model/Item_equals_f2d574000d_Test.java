/*
Test generated by RoostGPT for test agoncal-application-petstore-ee7 using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Validate the equals method when both "this" and "o" are the same object.
   Expected Result: The method should return true.

2. Test Scenario: Validate the equals method when "o" is null.
   Expected Result: The method should return false.

3. Test Scenario: Validate the equals method when "o" and "this" are of different classes.
   Expected Result: The method should return false.

4. Test Scenario: Validate the equals method when "o" is of the same class but the "name" field is different.
   Expected Result: The method should return false.

5. Test Scenario: Validate the equals method when "o" is of the same class but the "description" field is different.
   Expected Result: The method should return false.

6. Test Scenario: Validate the equals method when "o" is of the same class and both the "name" and "description" fields are the same.
   Expected Result: The method should return true.

7. Test Scenario: Validate the equals method when "o" is of the same class, "name" is the same, but "description" is null in either "this" or "o".
   Expected Result: The method should return false.

8. Test Scenario: Validate the equals method when "o" is of the same class, "description" is the same, but "name" is null in either "this" or "o".
   Expected Result: The method should return false.

9. Test Scenario: Validate the equals method when "o" is of the same class and both the "name" and "description" fields are null.
   Expected Result: The method should handle null values appropriately and not throw a Null Pointer Exception. The expected result may vary based on the business logic of your application.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Item_equals_f2d574000d_Test {

    @Test
    public void testEqualsSameObject() {
        Product product = new Product("Product1", "Description1", null);
        Item item = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        assertTrue(item.equals(item));
    }

    @Test
    public void testEqualsNull() {
        Product product = new Product("Product1", "Description1", null);
        Item item = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        assertFalse(item.equals(null));
    }

    @Test
    public void testEqualsDifferentClass() {
        Product product = new Product("Product1", "Description1", null);
        Item item = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        assertFalse(item.equals(product));
    }

    @Test
    public void testEqualsDifferentName() {
        Product product = new Product("Product1", "Description1", null);
        Item item1 = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        Item item2 = new Item("Item2", 10.0f, "ImagePath1", "Description1", product);
        assertFalse(item1.equals(item2));
    }

    @Test
    public void testEqualsDifferentDescription() {
        Product product = new Product("Product1", "Description1", null);
        Item item1 = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        Item item2 = new Item("Item1", 10.0f, "ImagePath1", "Description2", product);
        assertFalse(item1.equals(item2));
    }

    @Test
    public void testEqualsSameNameAndDescription() {
        Product product = new Product("Product1", "Description1", null);
        Item item1 = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        Item item2 = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        assertTrue(item1.equals(item2));
    }

    @Test
    public void testEqualsNullDescription() {
        Product product = new Product("Product1", "Description1", null);
        Item item1 = new Item("Item1", 10.0f, "ImagePath1", null, product);
        Item item2 = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        assertFalse(item1.equals(item2));
    }

    @Test
    public void testEqualsNullName() {
        Product product = new Product("Product1", "Description1", null);
        Item item1 = new Item(null, 10.0f, "ImagePath1", "Description1", product);
        Item item2 = new Item("Item1", 10.0f, "ImagePath1", "Description1", product);
        assertFalse(item1.equals(item2));
    }

    @Test
    public void testEqualsNullNameAndDescription() {
        Product product = new Product("Product1", "Description1", null);
        Item item1 = new Item(null, 10.0f, "ImagePath1", null, product);
        Item item2 = new Item(null, 10.0f, "ImagePath1", null, product);
        assertTrue(item1.equals(item2));
    }
}
