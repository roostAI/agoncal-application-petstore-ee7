/*
Test generated by RoostGPT for test agoncal-application-petstore-ee7 using AI Type Open AI and AI Model gpt-4

1. Scenario: Compare two identical objects
   Description: Ensure the equals() function returns true when the same object is passed for comparison.

2. Scenario: Compare two different objects of the same class
   Description: Test the equals() function with two distinct objects of the same class. The function should return false if their 'name' and 'description' attributes are different.

3. Scenario: Compare two objects of the same class with identical 'name' and 'description'
   Description: When two objects of the same class with identical 'name' and 'description' attributes are compared, the equals() function should return true.

4. Scenario: Compare an object with null
   Description: Test the equals() function by passing null as an argument. The function should return false as a null object cannot be equal to a non-null object.

5. Scenario: Compare an object with an object of a different class
   Description: Test the equals() function by comparing a Product object with an object of a different class. The function should return false as objects of different classes cannot be equal.

6. Scenario: Compare an object with itself
   Description: Test the equals() function by comparing an object with itself. The function should return true as an object is always equal to itself.

7. Scenario: Compare two objects of the same class with the same 'name' but different 'description'
   Description: When two objects of the same class with the same 'name' but different 'description' are compared, the equals() function should return false.

8. Scenario: Compare two objects of the same class with different 'name' but the same 'description'
   Description: When two objects of the same class with different 'name' but the same 'description' are compared, the equals() function should return false.
*/
package org.agoncal.application.petstore.model;

import nl.jqno.equalsverifier.EqualsVerifier;
import nl.jqno.equalsverifier.Warning;
import org.junit.Test;

public class Product_equals_f2d574000d_Test {

    @Test
    public void equalsContract() {
        EqualsVerifier.forClass(Product.class)
                .withPrefabValues(Category.class, new Category("name1", "description1"), new Category("name2", "description2"))
                .suppress(Warning.STRICT_INHERITANCE, Warning.NONFINAL_FIELDS)
                .verify();
    }

    @Test
    public void testEquals() {
        Product product1 = new Product("name", "description", new Category("categoryName", "categoryDescription"));
        Product product2 = new Product("name", "description", new Category("categoryName", "categoryDescription"));
        assert(product1.equals(product2));
    }

    @Test
    public void testNotEquals() {
        Product product1 = new Product("name1", "description1", new Category("categoryName1", "categoryDescription1"));
        Product product2 = new Product("name2", "description2", new Category("categoryName2", "categoryDescription2"));
        assert(!product1.equals(product2));
    }

    @Test
    public void testEqualsNull() {
        Product product = new Product("name", "description", new Category("categoryName", "categoryDescription"));
        assert(!product.equals(null));
    }

    @Test
    public void testEqualsDifferentClass() {
        Product product = new Product("name", "description", new Category("categoryName", "categoryDescription"));
        assert(!product.equals(new Category("name", "description")));
    }

    @Test
    public void testEqualsSameObject() {
        Product product = new Product("name", "description", new Category("categoryName", "categoryDescription"));
        assert(product.equals(product));
    }

    @Test
    public void testEqualsSameNameDifferentDescription() {
        Product product1 = new Product("name", "description1", new Category("categoryName", "categoryDescription"));
        Product product2 = new Product("name", "description2", new Category("categoryName", "categoryDescription"));
        assert(!product1.equals(product2));
    }

    @Test
    public void testEqualsDifferentNameSameDescription() {
        Product product1 = new Product("name1", "description", new Category("categoryName", "categoryDescription"));
        Product product2 = new Product("name2", "description", new Category("categoryName", "categoryDescription"));
        assert(!product1.equals(product2));
    }
}
