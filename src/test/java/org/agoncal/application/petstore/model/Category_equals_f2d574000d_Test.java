// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. Test if the equals method returns true when comparing an object to itself. This will check the line `if (this == o) return true;`.

2. Test if the equals method returns false when comparing any object to null. This will check the line `if (o == null || getClass() != o.getClass()) return false;`.

3. Test if the equals method returns false when comparing objects of different classes. This will again check the line `if (o == null || getClass() != o.getClass()) return false;`.

4. Test if the equals method returns true when comparing two different objects of the Category class having the same name. This will validate the line `return name.equals(category.name);`.

5. Test if the equals method returns false when comparing two different objects of the Category class having different names. This will again validate the line `return name.equals(category.name);`.

6. Test if the equals method returns false when comparing a Category object to another Object that is not a Category.

7. Test if the equals method deals correctly with different capitalization of the same name (depends on whether names are case-sensitive for your business rule).

8. Test if the equals method handles name values that are null correctly.

9. Test if the equals method still performs accurately when comparing two different Category instances with the same name but with additional fields changed (assuming there are more fields in the Category class, this verifies that only name is being used in the comparison).

10.Test if the equals method performs as expected when comparing two different Category instances where one instance is a subclass of Category (this test will verify polymorphic behavior).
*/
package org.agoncal.application.petstore.model;

import org.junit.Test;
import nl.jqno.equalsverifier.EqualsVerifier;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Objects;

public class Category_equals_f2d574000d_Test {

    @Test
    public void testEquals() {
        // Test for reference equality and non-nullity
        Category cat1 = new Category("Cat1", "Category1");
        Category cat2 = new Category("Cat2", "Category2");
        Category cat3 = cat1;

        // Test for reflexivity
        assertTrue(cat1.equals(cat1));

        // Test for nullity
        assertFalse(cat1.equals(null));

        // Test for symmetry
        assertTrue(cat1.equals(cat3));
        assertTrue(cat3.equals(cat1));

        // Test for transitivity
        assertTrue(cat1.equals(cat3));
        assertTrue(cat3.equals(cat1));
        assertTrue(cat1.equals(cat1));

        // Test for non-equality
        assertFalse(cat1.equals(cat2));
        cat2 = cat1;
        assertTrue(cat1.equals(cat2));

        // Test for different class types
        Object obj = new Object();
        assertFalse(cat1.equals(obj));


        // Verify error on changing case (assumes case sensitivity)
        cat2.setName("cat1");
        assertFalse(cat1.equals(cat2));

        // Test for null field
        cat1.setName(null);
        cat2.setName(null);
        assertTrue(cat1.equals(cat2));
        cat2.setName("Cat2");
        assertFalse(cat1.equals(cat2));

        cat1 = new Category("Cat1", "Category1");
        cat2 = new Category("Cat1", "Category2");
        assertTrue(cat1.equals(cat2));

        // Test Category with subclass instance
        CategorySubclass catSubclass = new CategorySubclass();
        assertFalse(cat1.equals(catSubclass));
    }

    // Test for hash code
    @Test
    public void testHashCode() {
        Category cat1 = new Category("Cat1", "Category1");
        Category cat2 = new Category("Cat1", "Category2");
        assertTrue(cat1.hashCode() == cat2.hashCode());
    }

    // Test for toString
    @Test
    public void testToString() {
        Category cat1 = new Category("Cat1", "Category1");
        assertTrue(cat1.toString().equals("Cat1"));
    }

    // Create a test subclass of Category
    private class CategorySubclass extends Category {
        CategorySubclass() {
            super("Cat1", "Category1");
        }
    }
}
