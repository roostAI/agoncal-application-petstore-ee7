// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. Test Scenario: Evaluate Positive Scenario with Identical Categories.
   - Description: If two category objects have identical names, the equals method should return true.

2. Test Scenario: Evaluate Negative Scenario with Different Categories. 
   - Description: If two category objects have different names, the equals method should return false.

3. Test Scenario: Comparison with same object.
   - Description: When comparing a category object with itself (same references), the equals method should return true.

4. Test Scenario: Comparison with null object.
   - Description: When comparing a category object with null, the equals method should return false.

5. Test Scenario: Comparison with a different type of object. 
   - Description: When comparing a category object with an object of a different class, the equals method should return false.

6. Test Scenario: Evaluating Scenario where Category Name Value is Null.
   - Description: Both objects do not have a category names, the equals method should throw a NullPointerException.

7. Test Scenario: Test with two different Categories, one of whose name is null.
   - Description: If one of the category's name is null and other has some non-null name, equals method should return a NullPointerException. 

8. Test Scenario: Case Insensitive Comparison. 
   - Description: Two Objects having the same category name but different capitalization should return false as equality is case sensitive.

9. Test Scenario: Test with two different Categories, both of whose names are empty strings.
   - Description: Both categories have a blank string as a name, the equals method should return true.

10. Test Scenario: Comparison of Category with Other Classes. 
   - Description: If we compare Category with instances of non-Category classes, it should return false as they are not instances of the same class.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Category_equals_f2d574000d_Test {

    private Category category1, category2;

    @BeforeEach
    public void init() {
        category1 = new Category();
        category2 = new Category();
    }

    @Test
    public void testIdenticalCategories() {
        category1.setName("Category 1");
        category2.setName("Category 1");
        assertTrue(category1.equals(category2));
    }

    @Test
    public void testDifferentCategories() {
        category1.setName("Category 1");
        category2.setName("Category 2");
        assertFalse(category1.equals(category2));
    }

    @Test
    public void testCompareWithSelf() {
        category1.setName("Category 1");
        assertTrue(category1.equals(category1));
    }

    @Test
    public void testCompareWithNull() {
        category1.setName("Category 1");
        assertFalse(category1.equals(null));
    }

    @Test
    public void testDifferentObjectType() {
        category1.setName("Category 1");
        assertFalse(category1.equals("Category 1"));
    }

    @Test
    public void testCategoryNameNull() {
        category1.setName(null);
        category2.setName(null);
        assertThrows(NullPointerException.class, () -> category1.equals(category2));
    }

    @Test
    public void testOneNullCategoryNames() {
        category1.setName(null);
        category2.setName("Category 2");
        assertThrows(NullPointerException.class, () -> category1.equals(category2));
    }

    @Test
    public void testCaseInsensitiveComparison() {
        category1.setName("Category");
        category2.setName("category");
        assertFalse(category1.equals(category2));
    }

    @Test
    public void testEmptyCategoryNames() {
        category1.setName("");
        category2.setName("");
        assertTrue(category1.equals(category2));
    }

    @Test
    public void testCompareWithOtherClass() {
        Object obj = new Object();
        assertFalse(category1.equals(obj));
    }

}
