// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
Below are the test scenarios:

1. Check both Category objects refer to same instance
   - Test that when comparing a Category instance with itself, the result is always true.

2. Check Category object with null input 
   - Test that when another Category object is null, the method return false.

3. Check Category object against objects of different classes
   - Test that when the object passed has a different class type than Category, the equals method should return false.

4. Check Category object with same Category name
   - Test that when two Category objects have exactly the same name, the equals method should return true.

5. Check Category object with different Category name
  - Test that when two Category objects have different names, the equals method should return false.

6. Check Category object with Case-insensitive name
  - It would be beneficial to test the behavior of the method when names are in different cases, depending on business requirements. If requirement is case insensitive, then "Marketing" and "marketing" should return true, otherwise false.

7. Check Category object with leading/trailing white spaces in the name
  - Depending on the business logic, "Marketing " and " Marketing" could be treated as equals or not.

Remember, these are just generic scenarios, you may need to adjust them based on specific business logic of your actual project.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import nl.jqno.equalsverifier.EqualsVerifier;

import static org.junit.jupiter.api.Assertions.*;

class Category_equals_f2d574000d_Test {
  private Category category;

  @BeforeEach
  void setUp() {
    category = new Category("TestCategory", "Sample description");
  }

  @Test
  void testEquals_sameInstance() {
    assertTrue(category.equals(category));
  }

  @Test
  void testEquals_null() {
    assertFalse(category.equals(null));
  }

  @Test
  void testEquals_differentClass() {
    Object obj = new Object();
    assertFalse(category.equals(obj));
  }

  @Test
  void testEquals_sameName() {
    Category anotherCategory = new Category("TestCategory", "Different description");
    assertTrue(category.equals(anotherCategory));
  }

  @Test
  void testEquals_differentName() {
    Category anotherCategory = new Category("DifferentName", "Different description");
    assertFalse(category.equals(anotherCategory));
  }

  @Test
  void testEquals_caseInsensitiveName() {
    Category anotherCategory = new Category("testcategory", "Sample description");
    assertFalse(category.equals(anotherCategory));
  }

  @Test
  void testEquals_leadingOrTrailingWhiteSpacesInName() {
    Category anotherCategory = new Category(" TestCategory ", "Sample description");
    assertFalse(category.equals(anotherCategory));
  }

  @Test
  void testHashCode() {
    EqualsVerifier.forClass(Category.class).verify();
  }
}
