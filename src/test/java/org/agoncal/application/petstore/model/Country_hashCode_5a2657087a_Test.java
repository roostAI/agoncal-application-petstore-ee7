// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. Check Hash code with a Unique ISO Code: Test the hashCode() function by passing a unique ISO Code value. The expected result should be the same hash code for that unique ISO Code. This scenario verifies that the hashCode method is working correctly and generating unique hash codes for unique ISO Codes.

2. Check Repeatability of Hash Code: Pass the same ISO Code multiple times to the hashCode() function. The hash code for the ISO Code should be the same every time. This scenario checks the repeatability and reliability of the hashCode function.

3. Check Hash code Generation for Null ISO Code: Pass a null value to the hashCode() function. The function should handle this gracefully and not throw a null pointer exception. This scenario tests how our hashCode function handles null inputs.

4. Check Hash code for Different ISO Codes: Pass several different ISO Codes to the hashCode() function. The hash codes generated should be different for each ISO Code. This scenario tests whether our hashCode function is correctly generating different hash codes for different ISO codes.

5. Validating hash for Empty String ISO Code: Check the behavior of hashCode() by passing an empty string ISO Code to it. This case will validate if the hashCode complies with Java's general contract which states that invoking the hashCode method multiple times on the same object should consistently return the same integer value.

6. Check HashCode for Very Large ISO Codes: Test the hashCode() function by passing a very large ISO Code to it. This case validates whether the hashCode function can handle larger inputs without slowing down or crashing.

7. Confirm Non-Equality of hashcodes: Confirm that unequal instances of ISO Codes do not produce same hash code. This will assert that hashCodes are distinct for different object instances, further ensuring the effective implementation of hashCode function.
*/
package org.agoncal.application.petstore.model;

import org.junit.Assert;
import org.junit.Test;
import java.util.Objects;


public class Country_hashCode_5a2657087a_Test {

    @Test
    public void testHashCodeUniqueness() {
        Country country1 = new Country("USA", "United States of America", "USA", "USA", "840");
        Country country2 = new Country("IND", "India", "IND", "IND", "356");

        Assert.assertNotEquals(Objects.hash(country1.getIsoCode()), Objects.hash(country2.getIsoCode()));
    }

    @Test
    public void testHashCodeRepeatability() {
        Country country = new Country("AUS", "Australia", "AUS", "AUS", "036");

        Assert.assertEquals(Objects.hash(country.getIsoCode()), Objects.hash(country.getIsoCode()));
    }

    @Test
    public void testHashCodeForNullISOCode() {
        Country country = new Country();
        country.setIsoCode(null);

        Assert.assertEquals(Objects.hash((Object) null), country.hashCode());
    }

    @Test
    public void testHashCodeForDifferentISOCodes() {
        Country country1 = new Country("GBR", "United Kingdom", "GBR", "GBR", "826");
        Country country2 = new Country("CAN", "Canada", "CAN", "CAN", "124");

        Assert.assertNotEquals(country1.hashCode(), country2.hashCode());
    }

    @Test
    public void testHashCodeForEmptyISOCode() {
        Country country = new Country();
        country.setIsoCode("");

        Assert.assertEquals(Objects.hash(""), country.hashCode());
    }

    @Test
    public void testHashCodeForLargeISOCodes() {
        Country country = new Country("XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123", "TestCountry", "Test", "Test", "000");

        Assert.assertEquals(Objects.hash("XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123XYZ123"), country.hashCode());
    }

    @Test
    public void testNonEqualityOfHashcodes() {
        Country country1 = new Country("GER", "Germany", "GER", "GER", "276");
        Country country2 = new Country("FRA", "France", "FRA", "FRA", "250");

        Assert.assertNotEquals(country1.hashCode(), country2.hashCode());
    }   
}
