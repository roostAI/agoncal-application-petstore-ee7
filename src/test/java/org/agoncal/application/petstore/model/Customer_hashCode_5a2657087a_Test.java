/*
Test generated by RoostGPT for test agoncal-application-petstore-ee7 using AI Type Open AI and AI Model gpt-4

1. Check if the hashCode method returns a consistent value: For a given input, the hashCode method should always return the same integer value across multiple invocations during an execution of a Java application.

2. Check if the hashCode method returns distinct integers for distinct objects: As per the contract of the hashCode method, if two objects are not equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. 

3. Check if the hashCode method returns the same integer for two equal objects: If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects should produce the same integer result.

4. Check if the hashCode method handles null values: The method should be able to handle null values and not cause a NullPointerException.

5. Check if the hashCode method handles empty strings: An empty string input should be valid and not cause any exceptions.

6. Check if the hashCode method handles special characters: The method should be able to handle special characters in the string input.

7. Check if the hashCode method handles long strings: The method should be able to handle strings of large length without any performance degradation or exceptions.

8. Check if the hashCode method handles case sensitivity correctly: The method should produce different hash codes for strings with different case, as strings are case-sensitive in Java.

9. Check if the hashCode method handles numeric strings correctly: The method should be able to handle numeric strings and produce a valid hash code.

10. Check if the hashCode method handles non-English alphabets: The method should be able to handle non-English alphabets and produce a valid hash code.
*/
import org.junit.Test;
import static org.junit.Assert.*;
import org.agoncal.application.petstore.model.Customer;
import org.agoncal.application.petstore.model.Address;

public class Customer_hashCode_5a2657087a_Test {

    @Test
    public void testHashCodeConsistency() {
        Customer customer = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        int initialHashCode = customer.hashCode();

        assertEquals(initialHashCode, customer.hashCode());
        assertEquals(initialHashCode, customer.hashCode());
    }

    @Test
    public void testHashCodeEquality() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        Customer customer2 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());

        assertEquals(customer1.hashCode(), customer2.hashCode());
    }

    @Test
    public void testHashCodeInequality() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());
        Customer customer2 = new Customer("Jane", "Doe", "jane", "password", "jane@example.com", new Address());

        assertNotEquals(customer1.hashCode(), customer2.hashCode());
    }

    @Test
    public void testHashCodeNull() {
        Customer customer = new Customer("John", "Doe", null, "password", "jdoe@example.com", new Address());

        assertEquals(0, customer.hashCode());
    }

    @Test
    public void testHashCodeEmpty() {
        Customer customer = new Customer("John", "Doe", "", "password", "jdoe@example.com", new Address());

        assertEquals(0, customer.hashCode());
    }

    @Test
    public void testHashCodeSpecialCharacters() {
        Customer customer = new Customer("John", "Doe", "@#$$%^", "password", "jdoe@example.com", new Address());

        int hashCode = customer.hashCode();

        assertTrue(hashCode != 0);
    }

    @Test
    public void testHashCodeLongString() {
        String longLogin = new String(new char[10000]).replace("\0", "a");
        Customer customer = new Customer("John", "Doe", longLogin, "password", "jdoe@example.com", new Address());

        int hashCode = customer.hashCode();

        assertTrue(hashCode != 0);
    }

    @Test
    public void testHashCodeCaseSensitivity() {
        Customer customer1 = new Customer("John", "Doe", "JDoe", "password", "jdoe@example.com", new Address());
        Customer customer2 = new Customer("John", "Doe", "jdoe", "password", "jdoe@example.com", new Address());

        assertNotEquals(customer1.hashCode(), customer2.hashCode());
    }

    @Test
    public void testHashCodeNumeric() {
        Customer customer = new Customer("John", "Doe", "12345", "password", "jdoe@example.com", new Address());

        int hashCode = customer.hashCode();

        assertTrue(hashCode != 0);
    }

    @Test
    public void testHashCodeNonEnglish() {
        Customer customer = new Customer("John", "Doe", "åäö", "password", "jdoe@example.com", new Address());

        int hashCode = customer.hashCode();

        assertTrue(hashCode != 0);
    }
}
