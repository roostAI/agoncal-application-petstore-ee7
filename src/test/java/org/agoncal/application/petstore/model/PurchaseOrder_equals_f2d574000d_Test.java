// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. Test Scenario: Test when both 'this' and 'o' references the same Object.
   Description: This scenario is to validate that 'equals()' returns true when 'this' and 'o' are the same object in memory.

2. Test Scenario: Test when 'o' is null.
   Description: This scenario is to validate that 'equals()' returns false when 'o' is null.

3. Test Scenario: Test when 'o' and 'this' are not the same class.
   Description: This scenario is to validate that 'equals()' returns false when 'o' and 'this' are not an instance of the same class.

4. Test Scenario: Test when the order date of 'this' and 'o' are not equal.
   Description: This scenario is to validate that 'equals()' returns false when the order dates of 'this' and 'o' are not the same.

5. Test Scenario: Test when the customer of 'this' and 'o' are not equal.
   Description: This scenario is to validate that 'equals()' returns false when the customers of 'this' and 'o'  are not the same.

6. Test Scenario: Test when all fields of 'this' and 'o' are equal.
   Description: This scenario is to validate that 'equals()' returns true when all the field values of 'this' and 'o' are the same. 

7. Test Scenario: Test the function with different object types.
   Description: This scenario is to validate how 'equals()' behaves when 'o' is not of type 'PurchaseOrder' but some other arbitrary object type.

In conclusion, 'equals()' function should be tested not just for matching all fields scenario but also when 'o' is null, of a different class type and when either 'orderDate' or 'customer' fields do not match.
*/
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.util.Date;
import static org.mockito.Mockito.when;

class PurchaseOrder_equals_f2d574000d_Test {

    @Nested
    class EqualsTest {

        @Test
        void should_return_true_when_same_object() {
            PurchaseOrder order = new PurchaseOrder();

            assertTrue(order.equals(order)); 
        }
        
        @Test
        void should_return_false_when_null_object() {
            PurchaseOrder order = new PurchaseOrder();
            
            assertFalse(order.equals(null)); 
        }
        
        @Test
        void should_return_false_when_different_class_object() {
            PurchaseOrder order = new PurchaseOrder();
            
            assertFalse(order.equals(new String("Not a Purchase Order"))); 
        }
        
        @Test
        void should_return_false_when_different_order_date() {
            PurchaseOrder order1 = new PurchaseOrder();
            order1.setOrderDate(new Date());
            
            PurchaseOrder order2 = new PurchaseOrder();
            order2.setOrderDate(new Date(order1.getOrderDate().getTime() + 10000));

            assertFalse(order1.equals(order2)); 
        }
        
        @Test
        void should_return_false_when_different_customer() {
            PurchaseOrder order = new PurchaseOrder();
            Customer customer1 = Mockito.mock(Customer.class);
            order.setCustomer(customer1);
            
            PurchaseOrder otherOrder = new PurchaseOrder();
            Customer customer2 = Mockito.mock(Customer.class);
            otherOrder.setCustomer(customer2);

            when(customer1.equals(customer2)).thenReturn(false);

            assertFalse(order.equals(otherOrder)); 
        }
        
        @Test
        void should_return_true_when_all_fields_same() {
            PurchaseOrder order1 = new PurchaseOrder();
            PurchaseOrder order2 = new PurchaseOrder();
            
            order1.setOrderDate(new Date());
            order2.setOrderDate(order1.getOrderDate());
            Customer customer = Mockito.mock(Customer.class);
            order1.setCustomer(customer);
            order2.setCustomer(customer);
            
            assertTrue(order1.equals(order2)); 
        }

        @Test
        void should_return_false_when_some_object_type() {
            PurchaseOrder order1 = new PurchaseOrder();
            assertFalse(order1.equals(new Object()));
        }
    }
}
