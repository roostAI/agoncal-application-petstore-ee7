// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. Scenario 1: Same Object Comparison
   Test Case: Pass the same object in the equals method.
   Expected Result: It should return 'true' as both the objects are the same.

2. Scenario 2: Comparing with Null
   Test Case: Pass null object in the equals method.
   Expected Result: It should return 'false' as the null object is not equal to the actual object.

3. Scenario 3: Comparing Different Class Objects
   Test Case: Pass object of a different class in the equals method.
   Expected Result: It should return 'false' as objects belong to different classes.

4. Scenario 4: Comparing Two Different Customers
   Test Case: Pass two different customer objects to the equals method.
   Expected Result: It should return 'false' as both customers have different login details.

5. Scenario 5: Comparing Two Customers with Same Login
   Test Case: Pass two customer objects with the same login information to the equals method.
   Expected Result: It should return 'true' as both customers have the same login details.

6. Scenario 6: Comparing with Itself
   Test Case: Pass the reference of the current object in the 'equals' method.
   Expected Result: It should return 'true' as object is compared with itself.

7. Scenario 7: Comparing Two Customers where One has Null Login
   Test Case: Pass two customer objects where one has a null login into the equals method.
   Expected Result: It should return 'false' as a null login is not equal to a non-null one.

8. Scenario 8: Comparing Two Customers with Null Logins
   Test Case: Pass two customer objects where both have null logins into the equals method.
   Expected Result: It should handle null pointer exception and should return 'true' as both logins are null. However, this is not a good scenario unless null login is valid in your business rules. 

Remember in testing scenarios, we wish to cover as many possibilities as possible, including edge cases and exceptions. Once these test scenarios are passed, we can have a fair level of confidence that the equals() method is working correctly.
*/
package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.*;

public class Customer_equals_f2d574000d_Test {

    @Test
    public void testEqualsSameObject() {
        Address addr1 = new Address("Street1", "City1", "Zip1", new Country());
        Customer cust1 = new Customer("John", "Doe", "johndoe", "password", "jd@example.com", addr1);
        assertTrue(cust1.equals(cust1));
    }

    @Test
    public void testEqualsWithNull() {
        Address addr1 = new Address("Street1", "City1", "Zip1", new Country());
        Customer cust1 = new Customer("John", "Doe", "johndoe", "password", "jd@example.com", addr1);
        assertFalse(cust1.equals(null));
    }
    
    @Test
    public void testEqualsDifferentClassObjects() {
        Address addr1 = new Address("Street1", "City1", "Zip1", new Country());
        Customer cust1 = new Customer("John", "Doe", "johndoe", "password", "jd@example.com", addr1);
        assertFalse(cust1.equals(addr1));
    }
    
    @Test
    public void testEqualsDifferentCustomers() {
        Address addr1 = new Address("Street1", "City1", "Zip1", new Country());
        Customer cust1 = new Customer("John", "Doe", "johndoe", "password", "jd@example.com", addr1);
        Customer cust2 = new Customer("Jane", "Doe", "janedoe", "password", "jd@example.com", addr1);
        assertFalse(cust1.equals(cust2));
    }

    @Test
    public void testEqualsSameLogin() {
        Address addr1 = new Address("Street1", "City1", "Zip1", new Country());
        Customer cust1 = new Customer("John", "Doe", "johndoe", "password", "jd@example.com", addr1);
        Customer cust2 = new Customer("Jane", "Doe", "johndoe", "password", "jd@example.com", addr1);
        assertTrue(cust1.equals(cust2));
    }

    @Test
    public void equalsNullLogin() {
        Address addr1 = new Address("Street1", "City1", "Zip1", new Country());
        Customer cust1 = new Customer("John", "Doe", null, "password", "jd@example.com", addr1);
        Customer cust2 = new Customer("Jane", "Doe", "janedoe", "password", "jd@example.com", addr1);
        assertFalse(cust1.equals(cust2));
    }

    @Test
	public void equalsBothNullLogin() {
		Address addr1 = new Address("Street1", "City1", "Zip1", new Country());
		Customer cust1 = new Customer("John", "Doe", null, "password", "jd@example.com", addr1);
		Customer cust2 = new Customer("Jane", "Doe", null, "password", "jd@example.com", addr1);
		assertTrue(cust1.equals(cust2));
	}
}
