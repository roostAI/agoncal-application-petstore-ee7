// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
The following are the test scenarios to validate the equals method business logic.

1. Scenario: Comparing two customer objects, both having unique logins
    - Given two customer objects with unique logins
    - When the 'equals' method is invoked
    - Then the result should be false

2. Scenario: Comparing two customer objects, both having the same login
    - Given two customer objects with the same login
    - When the 'equals' method is invoked
    - Then the result should be true

3. Scenario: Comparing the customer object with itself
    - Given one customer object
    - When the 'equals' method is invoked, comparing the object with itself
    - Then the result should be true

4. Scenario: Comparing a customer object with null
    - Given a customer object and null
    - When the 'equals' method is invoked, comparing the customer object with null
    - Then the result should be false

5. Scenario: Comparing the customer object with object of different class
    - Given a customer object
    - When the 'equals' method is invoked, comparing the customer object with an object of a different class
    - Then the result should be false

6. Scenario: Comparing two customer objects, where one or both of the login is null
    - Given two customer objects where one or both of the login value is null
    - When the 'equals' method is invoked
    - Then1: The result should be false, if only one login is null
    - Then2: The result should be true, if both logins are null 

Please note: In the last scenario, it assumes that login could be null. If null login is not allowed by your business rules, this scenario should be ignored.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import nl.jqno.equalsverifier.EqualsVerifier;

public class Customer_equals_f2d574000d_Test {

    @BeforeAll
    public static void setUp() {
        mockStatic(Customer.class);
    }

    @Test
    @DisplayName("Verify equals method: Unique Login Test")
    void testEqualsUniqueLogin() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@mail.com", new Address("Street 1", "City", "ZipCode", new Country()));
        Customer customer2 = new Customer("Jane", "Doe", "jane", "password", "jane@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        Assertions.assertFalse(customer1.equals(customer2));
    }

    @Test
    @DisplayName("Verify equals method: Same Login Test")
    void testEqualsSameLogin() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        Customer customer2 = new Customer("Jane", "Doe", "jdoe", "password", "jane@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        Assertions.assertTrue(customer1.equals(customer2));
    }

    @Test
    @DisplayName("Verify equals method: Same Object Test")
    void testEqualsSameObject() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        Assertions.assertTrue(customer1.equals(customer1));
    }

    @Test
    @DisplayName("Verify equals method: Null Object Test")
    void testEqualsNullObject() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        Assertions.assertFalse(customer1.equals(null));
    }

    @Test
    @DisplayName("Verify equals method: Different Class Object Test")
    void testEqualsDifferentClass() {
        Customer customer1 = new Customer("John", "Doe", "jdoe", "password", "jdoe@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        String str = new String();
        Assertions.assertFalse(customer1.equals(str));
    }

    @Test
    @DisplayName("Verify equals method: Null Login Test")
    void testEqualsNullLogin() {
        Customer customer1 = new Customer("John", "Doe", null, "password", "jdoe@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        Customer customer2 = new Customer("Jane", "Doe", "jdoe", "password", "jane@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        Assertions.assertFalse(customer1.equals(customer2));

        Customer customer3 = new Customer("Jane", "Doe", null, "password", "jane@mail.com", new Address("Street 1", "City","ZipCode", new Country()));
        Assertions.assertTrue(customer1.equals(customer3));
    }
    
    @Test
	public void equalsContract() {
		EqualsVerifier.forClass(Customer.class).verify();
	}
}
