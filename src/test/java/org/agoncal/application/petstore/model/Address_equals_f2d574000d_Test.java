// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. Scenario: Verify the equals method with two identical Address objects.
   - Given two Address objects with identical street1, city, and zipcode
   - When equals method is called
   - Then it should return true.

2. Scenario: Verify the equals method with two Address objects having different street1
   - Given two Address objects with different street1 but same city and zipcode
   - When equals method is called
   - Then it should return false.

3. Scenario: Verify the equals method with two Address objects having different cities 
   - Given two Address objects with same street1 but different cities and same zipcode
   - When equals method is called
   - Then it should return false.
   
4. Scenario: Verify the equals method with two Address objects having different zipcodes.
   - Given two Address objects with same street1, same city but different zipcodes
   - When equals method is called
   - Then it should return false.

5. Scenario: Verify the equals method when called by the same Address object
   - Given an Address object
   - When equals method is called with the same object as the argument
   - Then it should return true.

6. Scenario: Verify the equals method with null as argument
   - Given an Address object
   - When equals method is called with null as an argument
   - Then it should return false.

7. Scenario: Verify the equals method with an object of different class as argument
   - Given an Address object and an object of a different class
   - When equals method is called with the object of different class as an argument
   - Then it should return false.
*/
package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.*;

public class Address_equals_f2d574000d_Test {

    @Test
    public void testEqualsForIdenticalAddresses() {
        Country country = new Country();
        Address address1 = new Address("Street1", "City1", "Zipcode1", country);
        Address address2 = new Address("Street1", "City1", "Zipcode1", country);
        assertTrue(address1.equals(address2));
    }

    @Test
    public void testEqualsForAddressWithDifferentStreet1() {
        Country country = new Country();
        Address address1 = new Address("Street1", "City1", "Zipcode1", country);
        Address address2 = new Address("Street2", "City1", "Zipcode1", country);
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEqualsForAddressWithDifferentCity() {
        Country country = new Country();
        Address address1 = new Address("Street1", "City1", "Zipcode1", country);
        Address address2 = new Address("Street1", "City2", "Zipcode1", country);
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEqualsForAddressWithDifferentZipcode() {
        Country country = new Country();
        Address address1 = new Address("Street1", "City1", "Zipcode1", country);
        Address address2 = new Address("Street1", "City1", "Zipcode2", country);
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEqualsForSameAddressObject() {
        Country country = new Country();
        Address address = new Address("Street1", "City1", "Zipcode1", country);
        assertTrue(address.equals(address));
    }

    @Test
    public void testEqualsForNull() {
        Country country = new Country();
        Address address = new Address("Street1", "City1", "Zipcode1", country);
        assertFalse(address.equals(null));
    }

    @Test
    public void testEqualsForDifferentClassObject() {
        Country country = new Country();
        Address address = new Address("Street1", "City1", "Zipcode1", country);
        assertFalse(address.equals(country));
    }
}
