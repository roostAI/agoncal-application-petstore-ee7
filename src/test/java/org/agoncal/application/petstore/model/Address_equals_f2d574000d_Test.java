/*
Test generated by RoostGPT for test agoncal-application-petstore-ee7 using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function returns true when comparing the same object.
   Expected Result: The function should return true as we're comparing the same object.

2. Scenario: Check if the function returns false when comparing with a null object.
   Expected Result: The function should return false as the compared object is null.

3. Scenario: Check if the function returns false when comparing with an object of different class.
   Expected Result: The function should return false as the classes of the objects are not the same.

4. Scenario: Check if the function returns false when comparing with an Address object with different 'street1' field.
   Expected Result: The function should return false as the 'street1' fields of the two objects are not the same.

5. Scenario: Check if the function returns false when comparing with an Address object with different 'city' field.
   Expected Result: The function should return false as the 'city' fields of the two objects are not the same.

6. Scenario: Check if the function returns false when comparing with an Address object with different 'zipcode' field.
   Expected Result: The function should return false as the 'zipcode' fields of the two objects are not the same.

7. Scenario: Check if the function returns true when comparing with an Address object with the same 'street1', 'city', and 'zipcode' fields.
   Expected Result: The function should return true as the 'street1', 'city', and 'zipcode' fields of the two objects are the same.

8. Scenario: Check the function's behavior when comparing with an Address object with null fields.
   Expected Result: The function's behavior should be as defined when handling null fields.

9. Scenario: Check the function's behavior when the Address object itself has null fields.
   Expected Result: The function's behavior should be as defined when handling null fields in the current object.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class Address_equals_f2d574000d_Test {

    @Test
    public void testEqualsSameObject() {
        Address address1 = new Address("street1", "city", "zipcode", new Country());
        assertTrue(address1.equals(address1));
    }

    @Test
    public void testEqualsNullObject() {
        Address address1 = new Address("street1", "city", "zipcode", new Country());
        assertFalse(address1.equals(null));
    }

    @Test
    public void testEqualsDifferentClassObject() {
        Address address1 = new Address("street1", "city", "zipcode", new Country());
        assertFalse(address1.equals(new Country()));
    }

    @Test
    public void testEqualsDifferentStreet1() {
        Address address1 = new Address("street1", "city", "zipcode", new Country());
        Address address2 = new Address("street2", "city", "zipcode", new Country());
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEqualsDifferentCity() {
        Address address1 = new Address("street1", "city1", "zipcode", new Country());
        Address address2 = new Address("street1", "city2", "zipcode", new Country());
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEqualsDifferentZipcode() {
        Address address1 = new Address("street1", "city", "zipcode1", new Country());
        Address address2 = new Address("street1", "city", "zipcode2", new Country());
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEqualsSameFields() {
        Address address1 = new Address("street1", "city", "zipcode", new Country());
        Address address2 = new Address("street1", "city", "zipcode", new Country());
        assertTrue(address1.equals(address2));
    }

    @Test
    public void testEqualsNullFieldsInOtherObject() {
        Address address1 = new Address("street1", "city", "zipcode", new Country());
        Address address2 = new Address(null, null, null, new Country());
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEqualsNullFieldsInCurrentObject() {
        Address address1 = new Address(null, null, null, new Country());
        Address address2 = new Address("street1", "city", "zipcode", new Country());
        assertFalse(address1.equals(address2));
    }
}
