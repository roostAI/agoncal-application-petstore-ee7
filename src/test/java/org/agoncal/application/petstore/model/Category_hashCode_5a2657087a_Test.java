// Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
Test Scenario 1: Null Input
- Check that when the `name` is null, the function doesn't throw a NullPointerException.

Test Scenario 2: Non-null Input
- Check that the function returns an integer hash code when the `name` is not null.

Test Scenario 3: Consistency
- Check that the function is consistent, i.e., when called multiple times on the same object, it should return the same integer provided no changes have been made to the object.

Test Scenario 4: Equality
- Confirm the hashCode of two similar objects with the same `name` values, it should return same hash code.

Test Scenario 5: Uniqueness 
- Check that the function returns unique hash codes for distinct objects. Note this isn't guaranteed for all distinct objects, as hash collisions can occur. However, it will be a good test to check for a small sample of distinct objects.

Test Scenario 6: Non-Equality
- Confirm that if two objects have different `name` values, even if the difference is just in the case of the text, the function should return different hash codes. 

Test Scenario 7: Empty String
- Validate that the method is capable of handling an empty string as the `name` value and that it returns a specific consistent hash value.

Test scenario 8: Special Characters
- Test if the method correctly handles names which consist of special characters.

Test Scenario 9: Numeric Strings
- Confirm that the function can handle string values that are numeric and return the appropriate hashcode value.

Test Scenario 10: Large Strings
- Test that the function can handle large string sizes and that it returns a hash output in a reasonable amount of time. It should not throw any out of memory exceptions or similar.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Objects;
import java.util.stream.IntStream;

public class Category_hashCode_5a2657087a_Test {
    
    @Test
    public void testHashCodeWithNullInput() {
        Category category = new Category();
        category.setName(null);
        assertDoesNotThrow(category::hashCode);
    }
    
    @Test
    public void testHashCodeWithNonNullInput() {
        Category category = new Category();
        category.setName("Pets");
        assertAll(() -> assertNotNull(category.hashCode()),
                  () -> assertEquals(category.hashCode(), Objects.hash("Pets")));
    }

    @Test
    public void testHashCodeConsistency() {
        Category category = new Category();
        category.setName("Pets");
        int result = category.hashCode();
        IntStream.range(0, 100).forEach(i -> assertEquals(result, category.hashCode()));
    }

    @Test
    public void testHashCodeEquality() {
        Category category1 = new Category();
        category1.setName("Pets");
        Category category2 = new Category();
        category2.setName("Pets");
        assertEquals(category1.hashCode(), category2.hashCode());
    }

    @Test
    public void testHashCodeUniqueness() {
        Category category1 = new Category();
        category1.setName("Pets");
        Category category2 = new Category();
        category2.setName("Animals");
        assertNotEquals(category1.hashCode(), category2.hashCode());
    }

    @Test
    public void testHashCodeNonEquality() {
        Category category1 = new Category();
        category1.setName("Pets");
        Category category2 = new Category();
        category2.setName("pets");
        assertNotEquals(category1.hashCode(), category2.hashCode());
    }

    @Test
    public void testHashCodeForEmptyString() {
        Category category = new Category();
        category.setName("");
        assertAll(() -> assertNotNull(category.hashCode()),
                  () -> assertEquals(category.hashCode(), Objects.hash("")));
    }

    @Test
    public void testHashCodeForSpecialCharacters() {
        Category category = new Category();
        category.setName("@$#%^^");
        assertAll(() -> assertNotNull(category.hashCode()),
                  () -> assertEquals(category.hashCode(), Objects.hash("@$#%^^")));
    }

    @Test
    public void testHashCodeForNumericStrings() {
        Category category = new Category();
        category.setName("123");
        assertAll(() -> assertNotNull(category.hashCode()),
                  () -> assertEquals(category.hashCode(), Objects.hash("123")));
    }

    @Test
    public void testHashCodeForLargeStrings() {
        StringBuilder largeString = new StringBuilder();
        IntStream.range(0, 1_000_000).forEach(i -> largeString.append("a"));
        Category category = new Category();
        category.setName(largeString.toString());
        assertDoesNotThrow(category::hashCode);
    }
}
