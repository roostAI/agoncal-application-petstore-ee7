/*
Test generated by RoostGPT for test agoncal-application-petstore-ee7 using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Name is Null
- Description: In this scenario, we need to test the behavior of the hashCode function when the name variable is null. According to the Objects.hash() method, it should handle null values without throwing an exception.

Test Scenario 2: Name is Not Null
- Description: In this scenario, we will test the hashCode function when the name variable is not null. The function should compute a hash code value based on the value of the name variable.

Test Scenario 3: Changing Name Value
- Description: This scenario will test if the hash code changes when the value of the name variable changes. If the name variable is modified, the hash code should also be different.

Test Scenario 4: Same Name Value
- Description: In this scenario, we will test if the hash code remains the same when the name variable has the same value. Even if the name variable is set with the same value multiple times, the hash code should remain the same.

Test Scenario 5: Empty String Name Value
- Description: This scenario will test the behavior of the hashCode function when the name variable is an empty string. The function should be able to handle this and return a hash code value.

Test Scenario 6: Long String Name Value
- Description: In this scenario, we will test the hashCode function with a very long string value for the name variable. This is to ensure that the function can handle string values of any length.

Test Scenario 7: Special Characters in Name Value
- Description: This scenario will test the behavior of the hashCode function when the name variable contains special characters. The function should be able to handle this and return a hash code value.

Test Scenario 8: Numeric Characters in Name Value
- Description: This scenario will test the behavior of the hashCode function when the name variable contains numeric characters. The function should be able to handle this and return a hash code value.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class Category_hashCode_5a2657087a_Test {

    private Category category;

    @BeforeEach
    public void setup() {
        category = new Category();
    }

    @Test
    public void testNameIsNull() {
        category.setName(null);
        int result = category.hashCode();
        assertEquals(0, result);
    }

    @Test
    public void testNameIsNotNull() {
        category.setName("TestCategory");
        int result = category.hashCode();
        assertNotEquals(0, result);
    }

    @Test
    public void testChangingNameValue() {
        category.setName("TestCategory");
        int result1 = category.hashCode();
        category.setName("TestCategory1");
        int result2 = category.hashCode();
        assertNotEquals(result1, result2);
    }

    @Test
    public void testSameNameValue() {
        category.setName("TestCategory");
        int result1 = category.hashCode();
        category.setName("TestCategory");
        int result2 = category.hashCode();
        assertEquals(result1, result2);
    }

    @Test
    public void testEmptyStringNameValue() {
        category.setName("");
        int result = category.hashCode();
        assertEquals(0, result);
    }

    @Test
    public void testLongStringNameValue() {
        category.setName("ThisIsAVeryLongStringUsedForTestingTheHashCodeFunctionOfTheCategoryClass");
        int result = category.hashCode();
        assertNotEquals(0, result);
    }

    @Test
    public void testSpecialCharactersInNameValue() {
        category.setName("!@#$%^&*()_+{}|:\"<>?~`-=[]\\;',./");
        int result = category.hashCode();
        assertNotEquals(0, result);
    }

    @Test
    public void testNumericCharactersInNameValue() {
        category.setName("1234567890");
        int result = category.hashCode();
        assertNotEquals(0, result);
    }
}
