// ********RoostGPT********
/*
Test generated by RoostGPT for test java-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

ROOST_METHOD_HASH=equals_9577507f17
ROOST_METHOD_SIG_HASH=equals_f2d574000d

1. Scenario: Test when the passed object is the same instance -> The equals method should return true.
2. Scenario: Test when the passed object is null -> The equals method should return false.
3. Scenario: Test when the passed object's class is different from the current instance's class -> The equals method should return false.
4. Scenario: Test when the passed object's 'quantity' parameter is different from the current instance's 'quantity' -> The equals method should return false.
5. Scenario: Test when the passed object's 'item' parameter is different from the current instance's 'item' -> The equals method should return false.
6. Scenario: Test when the passed object's 'quantity' and 'item' parameters are the same as the current instance's properties -> The equals method should return true.
7. Scenario: Test when the passed object contains 'quantity' and 'item' as null -> The equals method should return false, as by assumption OrderLine's 'quantity' and 'item' parameters won't be null (considering that javax validation @Min is in the class which is not shown in the code snippet).
8. Scenario: Test when the passed object is an instance of the subclass of OrderLine -> The equals method should return false, as getClass() was used for class comparison, not instanceof.
9. Scenario: Test when the OrderLine class is not fully initialised and contains default Java values -> The equals method should act accordingly.
10. Scenario: Test with multithreaded access to verify thread safety of the equals method -> The equals method should behave as expected.
11. Scenario: Test when the passed object is from a class loaded by a different classloader -> The equals method should return false as two classes loaded by different classloaders are not equal, even though they look alike.
12. Scenario: Test when the same object is compared multiple times with the equals method -> The equals method should return consistent result.
*/

// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.Test;

import static org.junit.Assert.*;

public class OrderLine_equals_f2d574000d_Test {

    @Test
    public void testEquals_SameInstance() {
        OrderLine orderLine1 = new OrderLine();
        assertTrue(orderLine1.equals(orderLine1));
    }

    @Test
    public void testEquals_NullObject() {
        OrderLine orderLine1 = new OrderLine();
        assertFalse(orderLine1.equals(null));
    }

    @Test
    public void testEquals_DifferentClasses() {
        OrderLine orderLine1 = new OrderLine();
        String notOrderLine = "Not OrderLine";
        assertFalse(orderLine1.equals(notOrderLine));
    }

    @Test
    public void testEquals_DifferentQuantity() {
        OrderLine orderLine1 = new OrderLine();
        orderLine1.setQuantity(10);

        OrderLine orderLine2 = new OrderLine();
        orderLine2.setQuantity(15);

        assertFalse(orderLine1.equals(orderLine2));
    }

    @Test
    public void testEquals_DifferentItem() {
        OrderLine orderLine1 = new OrderLine();
        Item item1 = new Item();
        orderLine1.setItem(item1);

        OrderLine orderLine2 = new OrderLine();
        Item item2 = new Item();
        orderLine2.setItem(item2);

        assertFalse(orderLine1.equals(orderLine2));
    }

    @Test
    public void testEquals_SameQuantityAndItem() {
        OrderLine orderLine1 = new OrderLine();
        OrderLine orderLine2 = new OrderLine();
        assertTrue(orderLine1.equals(orderLine2));
    }

    @Test(expected = NullPointerException.class)
    public void testEquals_NullQuantityAndItem() {
        OrderLine orderLine1 = new OrderLine();
        OrderLine orderLine2 = new OrderLine();
        orderLine2.setQuantity(null);
        orderLine2.setItem(null);

        assertFalse(orderLine1.equals(orderLine2));
    }
}
