/*
Test generated by RoostGPT for test agoncal-application-petstore-ee7 using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Object Comparison with Itself
- Given an OrderLine object, when the equals method is called with the same object as an argument, then the method should return true. This will validate the condition "this == o".

Test Scenario 2: Object Comparison with Null
- Given an OrderLine object, when the equals method is called with null as an argument, then the method should return false. This will validate the condition "o == null".

Test Scenario 3: Object Comparison with Different Class Type
- Given an OrderLine object, when the equals method is called with an object of a different class as an argument, then the method should return false. This will validate the condition "getClass() != o.getClass()".

Test Scenario 4: Object Comparison with Same Class Type but Different Quantity
- Given two OrderLine objects with the same item but different quantities, when the equals method is called with the second object as an argument on the first object, then the method should return false. This will validate the condition "quantity.equals(orderLine.quantity)".

Test Scenario 5: Object Comparison with Same Class Type but Different Item
- Given two OrderLine objects with the same quantity but different items, when the equals method is called with the second object as an argument on the first object, then the method should return false. This will validate the condition "item.equals(orderLine.item)".

Test Scenario 6: Object Comparison with Same Class Type, Same Item, and Same Quantity
- Given two OrderLine objects with the same item and quantity, when the equals method is called with the second object as an argument on the first object, then the method should return true. This will validate the overall logic of the equals method.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class OrderLine_equals_f2d574000d_Test {

    @Test
    public void testEquals_SameObject() {
        Item item = new Item("TestItem", 10.0f, "imagePath", "description", new Product());
        OrderLine orderLine1 = new OrderLine(5, item);
        assertTrue(orderLine1.equals(orderLine1));
    }

    @Test
    public void testEquals_NullObject() {
        Item item = new Item("TestItem", 10.0f, "imagePath", "description", new Product());
        OrderLine orderLine1 = new OrderLine(5, item);
        assertFalse(orderLine1.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        Item item = new Item("TestItem", 10.0f, "imagePath", "description", new Product());
        OrderLine orderLine1 = new OrderLine(5, item);
        assertFalse(orderLine1.equals(new String("Test")));
    }

    @Test
    public void testEquals_SameClass_DifferentQuantity() {
        Item item = new Item("TestItem", 10.0f, "imagePath", "description", new Product());
        OrderLine orderLine1 = new OrderLine(5, item);
        OrderLine orderLine2 = new OrderLine(10, item);
        assertFalse(orderLine1.equals(orderLine2));
    }

    @Test
    public void testEquals_SameClass_DifferentItem() {
        Item item1 = new Item("TestItem1", 10.0f, "imagePath", "description", new Product());
        Item item2 = new Item("TestItem2", 20.0f, "imagePath", "description", new Product());
        OrderLine orderLine1 = new OrderLine(5, item1);
        OrderLine orderLine2 = new OrderLine(5, item2);
        assertFalse(orderLine1.equals(orderLine2));
    }

    @Test
    public void testEquals_SameClass_SameItem_SameQuantity() {
        Item item = new Item("TestItem", 10.0f, "imagePath", "description", new Product());
        OrderLine orderLine1 = new OrderLine(5, item);
        OrderLine orderLine2 = new OrderLine(5, item);
        assertTrue(orderLine1.equals(orderLine2));
    }
}
